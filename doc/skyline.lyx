#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\use_default_options true
\begin_modules
theorems-ams
eqs-within-sections
figs-within-sections
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
A skyline sparse matrix solver in Rust
\end_layout

\begin_layout Section
Theory
\end_layout

\begin_layout Subsection
Notations
\end_layout

\begin_layout Standard
We want to solve a linear system
\begin_inset Formula 
\begin{equation}
Ax=b,\label{eq:lin_sys}
\end{equation}

\end_inset

where 
\begin_inset Formula $A$
\end_inset

 is a 
\begin_inset Formula $n\times n$
\end_inset

 real (for instance) matrix.
 We use the following notations:
\end_layout

\begin_layout Itemize
The range 
\begin_inset Formula $i\ldots j$
\end_inset

 is the list of integers 
\begin_inset Formula $[i,i+1,\ldots,j-1]$
\end_inset

.
 Please note that 
\begin_inset Formula $j$
\end_inset

 is not included in the range (this is similar to the C, Python and Rust
 notations) and that if if 
\begin_inset Formula $i\geq j$
\end_inset

, then 
\begin_inset Formula $i\ldots j=[]$
\end_inset

 (the range is empty).
\end_layout

\begin_layout Itemize
The elements of the matrix 
\begin_inset Formula $A$
\end_inset

 are noted 
\begin_inset Formula $a_{j}^{i}$
\end_inset

: the row index 
\begin_inset Formula $i$
\end_inset

 is noted with a superscript and the column index 
\begin_inset Formula $j$
\end_inset

 with a subscript.
 We use the convention that the row and column indices are in the range
 
\begin_inset Formula $0\ldots n$
\end_inset

.
\end_layout

\begin_layout Itemize
\begin_inset Formula $a_{j\ldots l}^{i\ldots k}$
\end_inset

 is the sub-matrix of 
\begin_inset Formula $A$
\end_inset

 constructed from the given rows and columns ranges.
 If one range is empty, the sub-matrix is empty .
 The scalar product of two empty vectors is assumed to be zero.
\end_layout

\begin_layout Subsection
\begin_inset Formula $LU$
\end_inset

 decomposition
\end_layout

\begin_layout Standard
It is generally possible to write 
\begin_inset Formula $A$
\end_inset

 under the form
\begin_inset Formula 
\begin{equation}
A=LU,\label{eq:lu_dec}
\end{equation}

\end_inset

where 
\begin_inset Formula $L$
\end_inset

 is a lower triangular matrix with a unit diagonal and 
\begin_inset Formula $U$
\end_inset

 is an upper triangular matrix.
 The 
\begin_inset Formula $LU$
\end_inset

 decomposition allows to reduce (
\begin_inset CommandInset ref
LatexCommand ref
reference "eq:lin_sys"
plural "false"
caps "false"
noprefix "false"

\end_inset

) to the resolution of two triangular linear systems.
\end_layout

\begin_layout Standard
Traditionally, in the computer algorithm, the decomposition is stored in
 the same place as the initial matrix 
\begin_inset Formula $A$
\end_inset

.
 The following algorithm (Doolittle algorithm) replaces 
\begin_inset Formula $A$
\end_inset

 by 
\begin_inset Formula $L-I+U$
\end_inset

.
 For an easier reading, we distinguish between 
\begin_inset Formula $L$
\end_inset

, 
\begin_inset Formula $U$
\end_inset

 and 
\begin_inset Formula $A$
\end_inset

, but in practice we can replace 
\begin_inset Formula $L$
\end_inset

 and 
\begin_inset Formula $U$
\end_inset

 by 
\begin_inset Formula $A$
\end_inset

 in the Doolittle algorithm.
\end_layout

\begin_layout Itemize
Initialization: 
\begin_inset Formula $L-I+U=A$
\end_inset

.
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $1\ldots n$
\end_inset

 (diagonal loop on the pivots)
\end_layout

\begin_deeper
\begin_layout Itemize
for 
\begin_inset Formula $j$
\end_inset

 in 
\begin_inset Formula $0\ldots k$
\end_inset

 
\begin_inset Formula 
\[
L_{j}^{k}\leftarrow\frac{1}{U_{j}^{j}}\left(L_{j}^{k}-\sum_{0\leq p<j}L_{p}^{k}U_{j}^{p}\right)
\]

\end_inset

(update row of 
\begin_inset Formula $L$
\end_inset

 left to the pivot).
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $0\ldots k+1$
\end_inset

 
\begin_inset Formula 
\[
U_{k}^{i}\leftarrow U_{k}^{i}-\sum_{0\leq p<i}L_{p}^{i}\cdot U_{k}^{p}
\]

\end_inset

(update the column of 
\begin_inset Formula $U$
\end_inset

 above the pivot).
\end_layout

\end_deeper
\begin_layout Standard
This algorithm works if the pivot 
\begin_inset Formula $U_{k}^{k}$
\end_inset

 never vanishes.
 It can be rewritten with scalar products of sub-rows of 
\begin_inset Formula $L$
\end_inset

 with sub-columns of 
\begin_inset Formula $U$
\end_inset

:
\end_layout

\begin_layout Itemize
Initialization: 
\begin_inset Formula $L-I+U=A$
\end_inset

.
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $1\ldots n$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
for 
\begin_inset Formula $j$
\end_inset

 in 
\begin_inset Formula $0\ldots k$
\end_inset

 
\begin_inset Formula 
\[
L_{j}^{k}\leftarrow L_{j}^{k}-L_{0\ldots j}^{k}\cdot U_{j}^{0\ldots j}
\]

\end_inset


\begin_inset Formula 
\[
L_{j}^{k}\leftarrow\frac{L_{j}^{k}}{U_{j}^{j}}
\]

\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $0\ldots k+1$
\end_inset

 
\begin_inset Formula 
\[
U_{k}^{i}\leftarrow U_{k}^{i}-L_{0\ldots i}^{i}\cdot U_{k}^{0\ldots i}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Triangular solve
\end_layout

\begin_layout Standard
Once the decomposition is computed, for solving
\begin_inset Formula 
\[
Ax=b,
\]

\end_inset

we solve two triangular systems, first
\begin_inset Formula 
\[
Ly=b,
\]

\end_inset

and then 
\begin_inset Formula 
\[
Ux=y.
\]

\end_inset

The solution of 
\begin_inset Formula $Ly=b$
\end_inset

 is given by the following algorithm
\end_layout

\begin_layout Itemize
Initialization: 
\begin_inset Formula $y^{0}=b^{0}$
\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $1\ldots n$
\end_inset


\begin_inset Formula 
\[
y^{i}=b^{i}-\sum_{0\leq j<i}L_{j}^{i}y^{j}
\]

\end_inset

or
\begin_inset Formula 
\[
y^{i}=b^{i}-L_{0\ldots i}^{i}\cdot y^{0\ldots i}
\]

\end_inset

The solution of 
\begin_inset Formula $Ux=y$
\end_inset

 is given by the following algorithm
\end_layout

\begin_layout Itemize
Initialization: 
\begin_inset Formula $x^{n-1}=y^{n-1}/U_{n-1}^{n-1}$
\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $[n-2,n-3,\ldots,0]$
\end_inset


\begin_inset Formula 
\[
x^{i}=\frac{1}{U_{i}^{i}}\left(y^{i}-\sum_{i+1\leq j<n}U_{j}^{i}x^{j}\right)
\]

\end_inset

or
\begin_inset Formula 
\[
x^{i}=\frac{1}{U_{i}^{i}}\left(y^{i}-U_{i+1\ldots n}^{i}x^{i+1\ldots n}\right)
\]

\end_inset


\end_layout

\begin_layout Section
ImplÃ©mentation for sparse matrices
\end_layout

\begin_layout Subsection
Sparse skyline matrix
\end_layout

\begin_layout Standard
The matrix 
\begin_inset Formula $A$
\end_inset

 is said to be sparse if it contains many zeros.
 For this kind of matrix it is interesting to find data structures that
 avoid the storage of the zeros and unnecessary operations with these zeros.
 A nice case is when the pattern of the zeros is the same for 
\begin_inset Formula $A$
\end_inset

 and 
\begin_inset Formula $L-I+U$
\end_inset

.
 It is indeed possible to find such patterns.
 The skyline storage is an example of such a pattern.
 We need some definitions:
\end_layout

\begin_layout Itemize
An array prof
\begin_inset Formula $[0\ldots n]$
\end_inset

 is called a profile of 
\begin_inset Formula $A$
\end_inset

 if 
\begin_inset Formula $A_{j}^{i}=0$
\end_inset

 when 
\begin_inset Formula $j<\text{prof}[i]$
\end_inset

.
 A couple of indices 
\begin_inset Formula $(i,j)$
\end_inset

 is said to be in the profile of 
\begin_inset Formula $A$
\end_inset

 if 
\begin_inset Formula $j\geq\text{prof}[i]$
\end_inset

.
\end_layout

\begin_layout Itemize
An array sky
\begin_inset Formula $[0\ldots n]$
\end_inset

 is called a skyline of 
\begin_inset Formula $A$
\end_inset

 if 
\begin_inset Formula $A_{j}^{i}=0$
\end_inset

 when 
\begin_inset Formula $i<\text{sky}[j]$
\end_inset

.
 A couple of indices 
\begin_inset Formula $(i,j)$
\end_inset

 is said to be in the skyline of 
\begin_inset Formula $A$
\end_inset

 if 
\begin_inset Formula $i\geq\text{sky}[j]$
\end_inset

.
\end_layout

\begin_layout Standard
Remark: if 
\begin_inset Formula $(i,j)$
\end_inset

 correspond to a non-zero value 
\begin_inset Formula $a_{j}^{i}\neq0$
\end_inset

 then 
\begin_inset Formula $(i,j)$
\end_inset

 is both in the profile and in the skyline of 
\begin_inset Formula $A$
\end_inset

.
 We can have zeros in the profile and in the skyline, they are simply treated
 as non-zero terms.
 The limit cases correspond to prof
\begin_inset Formula $[i]=0$
\end_inset

, sky
\begin_inset Formula $[j]=0$
\end_inset

 (full matrix storage) and prof
\begin_inset Formula $[i]=i$
\end_inset

, sky
\begin_inset Formula $[j]=j$
\end_inset

 (diagonal matrix).
\end_layout

\begin_layout Standard
It is possible to prove the following theorem.
\end_layout

\begin_layout Theorem
If prof is a profile of 
\begin_inset Formula $A$
\end_inset

 and sky a skyline of 
\begin_inset Formula $A$
\end_inset

 then prof remains a profile and sky a skyline during all the steps of the
 
\begin_inset Formula $Gauss$
\end_inset

 algorithm and in the end prof is a profile of 
\begin_inset Formula $L-I+U$
\end_inset

 and sky a skyline of 
\begin_inset Formula $L-I+U$
\end_inset

.
\end_layout

\begin_layout Standard
The most efficient method for storing a sparse matrix in term of memory
 is the coordinate format.
 Assume that the matrix has nnz non-zero entries.
 We store it in an array coo
\begin_inset Formula $[0\ldots nnz]$
\end_inset

 of triplets 
\begin_inset Formula $(i,j,v)$
\end_inset

 such that
\begin_inset Formula 
\[
\text{coo}[k]=(i,j,v)\Rightarrow a_{j}^{i}=v.
\]

\end_inset

We will store the lines of 
\begin_inset Formula $L$
\end_inset

 (without the diagonal terms) in the array ltab, the columns of 
\begin_inset Formula $U$
\end_inset

 (with the diagonal terms) in utab.
 ltab and utab are two vectors of vectors of 64 bits double precision numbers.
 Because we cannot know a priori the number of non-zero terms in the lines
 of 
\begin_inset Formula $L$
\end_inset

 and in the columns of 
\begin_inset Formula $U$
\end_inset

 we need first to construct the skyline and the profile.
 This is done by the following algorithm:
\end_layout

\begin_layout Itemize
Initialization: prof
\begin_inset Formula $[i]=i$
\end_inset

, sky
\begin_inset Formula $[j]=j$
\end_inset

.
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $0\ldots nnz$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $(i,j,v)=\text{coo}[k]$
\end_inset


\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $i>j$
\end_inset

 and 
\begin_inset Formula $v\neq0$
\end_inset

 then prof
\begin_inset Formula $[i]=\min(\text{prof}[i],j)$
\end_inset


\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $i<j$
\end_inset

 and 
\begin_inset Formula $v\neq0$
\end_inset

 then sky
\begin_inset Formula $[j]=\min(\text{sky}[j],i)$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
We can now construct ltab[][] and utab[][] with the following algorithm
\end_layout

\begin_layout Itemize
Initialization: 
\begin_inset Formula $\text{ltab}[i]=[0;i-\text{prof}[i]]$
\end_inset

, 
\begin_inset Formula $\text{utab}[j]=[0;j-\text{sky}[j]+1]$
\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $0\ldots nnz$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Formula $(i,j,v)=\text{coo}[k]$
\end_inset


\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $i>j$
\end_inset

 then 
\begin_inset Formula $\text{ltab}[i][j-\text{prof}[i]]\text{+=}v$
\end_inset


\end_layout

\begin_layout Itemize
if 
\begin_inset Formula $i\leq j$
\end_inset

 then 
\begin_inset Formula $\text{utab}[j][i-\text{sky}[j]]\text{+=}v$
\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Optimisation of the Doolittle algorithm
\end_layout

\begin_layout Standard
The Doolittle elimination algorithm given above can yet be optimized for
 the skyline representation.
 This gives:
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $k$
\end_inset

 in 
\begin_inset Formula $1\ldots n$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
for 
\begin_inset Formula $j$
\end_inset

 in 
\begin_inset Formula $\text{prof}[k]\ldots k$
\end_inset


\begin_inset Formula 
\[
L_{j}^{k}\leftarrow\frac{1}{U_{j}^{j}}\left(L_{j}^{k}-\sum_{p}L_{p}^{k}U_{j}^{p}\right),\quad p\in\max(\text{prof}[k],\text{sky}[j])\ldots j
\]

\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $\text{sky}[k]\ldots k+1$
\end_inset

 
\begin_inset Formula 
\[
U_{k}^{i}\leftarrow U_{k}^{i}-\sum_{p}L_{p}^{i}\cdot U_{k}^{p},\quad p\in\text{max}(\text{prof}[i],\text{sky}[k])\ldots i
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Optimisation of the triangular solvers
\end_layout

\begin_layout Standard
The optimisation of the 
\begin_inset Formula $L$
\end_inset

 solver is easy
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $0\ldots n$
\end_inset


\begin_inset Formula 
\[
y^{i}=b^{i}-L_{\text{prof}[i]\ldots i}^{i}\cdot y^{0\ldots i}
\]

\end_inset


\end_layout

\begin_layout Standard
The optimisation of the 
\begin_inset Formula $U$
\end_inset

 solver is less simple (because the rows of 
\begin_inset Formula $U$
\end_inset

 are less natural to access than the columns in the skyline storage).
 The naive algorithm would be to write:
\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $[n-1,n-2,\ldots,0]$
\end_inset


\begin_inset Formula 
\[
x^{i}=\frac{1}{U_{i}^{i}}\left(y^{i}-\sum_{i<j<n}U_{j}^{i}x^{j}\right),\quad\max(i,\text{sky}[j])<j<n
\]

\end_inset


\end_layout

\begin_layout Standard
But this is not the good method, because one would have to loop on all 
\begin_inset Formula $j$
\end_inset

 and test if 
\begin_inset Formula $\max(i,\text{sky}[j])<j$
\end_inset

.
 A better way is to loop on the columns of 
\begin_inset Formula $U$
\end_inset

 starting from the last one and add the corresponding contribution to the
 
\begin_inset Formula $x$
\end_inset

 vector.
 When the contributions of column 
\begin_inset Formula $j$
\end_inset

 are treated we can divide 
\begin_inset Formula $x^{j-1}$
\end_inset

by 
\begin_inset Formula $U_{j-1}^{j-1}$
\end_inset

and continue.
 We obtain the following algorithm
\end_layout

\begin_layout Itemize
Initialization 
\begin_inset Formula $x^{n-1}=y^{n-1}/U_{n-1}^{n-1}$
\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $j$
\end_inset

 in 
\begin_inset Formula $[n-2,n-3,\ldots,0]$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $0..j+1$
\end_inset

 
\begin_inset Formula 
\[
x^{i}\leftarrow x^{i}-U_{j+1}^{i}x^{j+1}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x^{j}\leftarrow x^{j}/U_{j}^{j}$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
In this form, we can use the skyline structure, we obtain
\end_layout

\begin_layout Itemize
Initialization 
\begin_inset Formula $x^{n-1}=y^{n-1}/U_{n-1}^{n-1}$
\end_inset


\end_layout

\begin_layout Itemize
for 
\begin_inset Formula $j$
\end_inset

 in 
\begin_inset Formula $[n-2,n-3,\ldots,0]$
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
for 
\begin_inset Formula $i$
\end_inset

 in 
\begin_inset Formula $\text{sky}[j+1]..j+1$
\end_inset

 
\begin_inset Formula 
\[
x^{i}\leftarrow x^{i}-U_{j+1}^{i}x^{j+1}
\]

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $x^{j}\leftarrow x^{j}/U_{j}^{j}$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Final trick: if the vector 
\begin_inset Formula $b$
\end_inset

 is not needed anymore, the computations can be done in place with 
\begin_inset Formula $x=y=b$
\end_inset

.
 At the end 
\begin_inset Formula $b$
\end_inset

 is replaced by the solution 
\begin_inset Formula $x$
\end_inset

.
\end_layout

\end_body
\end_document
